{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","modal/modal.js","timepicker/timepicker.js","tooltip/tooltip.js","tab/tab.js","select/select.js","popover/popover.js","scrollspy/scrollspy.js","navbar/navbar.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","dropdown/dropdown.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","backdropAnimation","this","compile","controller","console","controllerAs","resolve","copy","locals","bindToController","angular","forEach","value","isString","$injector","key","invoke","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","data","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$typeahead","parentScope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$render","$emit","isDefined","onSelect","$setViewValue","length","isFunction","equals","$onMouseDown","preventDefault","stopPropagation","keyCode","$digest","show","$element","hide","$onKeyDown","$$phase","$root","TypeaheadFactory","array","$filter","expression","directive","results","postLink","attr","restrict","require","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","destroy","$on","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","isNative","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","isUndefined","collapse","moveStart","moveEnd","focusElement","focus","_init","init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","isNaN","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","midIndex","parseInt","hours","disabled","i","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","target","nodeName","targetEl","triggerHandler","isTouch","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","prop","_destroy","off","_show","_hide","blur","$options","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","$eval","timepicker","bsShow","match","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","placement","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","promise","$bsCompiler","split","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","on","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","setOffset","using","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$promise","$new","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","compileData","tipContainer","bindTriggerEvents","isElement","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","prefixClass","version","prepend","$applyPlacement","$animate","enterAnimateCallback","_blur","leave","onBeforeHide","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","query","querySelectorAll","tooltip","transclusion","dataTarget","hasOwnProperty","$observe","bsTooltip","setViewport","self","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","active","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$tab","transclude","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","controllers","render","$isActive","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","e","dataMultiple","inputEl","addEventListener","join","$isEmpty","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","offsetTop","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","minor","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","backdrop","size","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","$show","bottom","destroyModalElement","z-index","backdropBaseZindex","defaultPrevented","customClass","bindBackdropEvents","which","lg","sm","modalClass","bsModal","modal","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$hasClear","$toggleMode","$views","$mode","setMode","$setToday","$clear","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","bsCollapseToggle","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","bind","v","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          // scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          //   controller.$render();\n          // });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            // if (!hasExoticValues) {\n              controller.$render();\n            // }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          // scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          //   controller.$render();\n          // });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            // if (!hasExoticValues) {\n              controller.$render();\n            // }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}